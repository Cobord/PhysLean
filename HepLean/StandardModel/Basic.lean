/-
Copyright (c) 2024 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license.
Authors: Joseph Tooby-Smith
-/
import Mathlib.Data.Complex.Exponential
import Mathlib.Geometry.Manifold.VectorBundle.Basic
import Mathlib.Geometry.Manifold.VectorBundle.SmoothSection
import Mathlib.Geometry.Manifold.Instances.Real
import Mathlib.RepresentationTheory.Basic
import Mathlib.LinearAlgebra.Matrix.ToLin
import Mathlib.Analysis.InnerProductSpace.Adjoint
import Mathlib.LinearAlgebra.CliffordAlgebra.Basic
/-!
# The Standard Model

This file defines the basic properties of the standard model in particle physics.

## TODO

- Change the gauge group to a quotient of SU(3) x SU(2) x U(1) by a subgroup of ‚Ñ§‚ÇÜ.
(see e.g. pg 97 of  http://www.damtp.cam.ac.uk/user/tong/gaugetheory/gt.pdf)

-/
universe v u
namespace StandardModel

open Manifold
open Matrix
open Complex
open ComplexConjugate

noncomputable section spaceTime

/-- The space-time -/
def spaceTime : Type := Fin 4 ‚Üí ‚Ñù

/-- Give spacetime the structure of an additive commutative monoid. -/
instance : AddCommMonoid spaceTime := Pi.addCommMonoid

/-- Give spacetime the structure of a module over the reals. -/
instance : Module ‚Ñù spaceTime := Pi.module _ _ _

instance euclideanNormedAddCommGroup : NormedAddCommGroup spaceTime := Pi.normedAddCommGroup

instance euclideanNormedSpace : NormedSpace ‚Ñù spaceTime := Pi.normedSpace


namespace spaceTime

def asSmoothManifold : ModelWithCorners ‚Ñù spaceTime spaceTime := ùìò(‚Ñù, spaceTime)

def stdBasis : Basis (Fin 4) ‚Ñù spaceTime := Pi.basisFun ‚Ñù (Fin 4)

lemma stdBasis_apply (Œº ŒΩ : Fin 4) : stdBasis Œº ŒΩ = if Œº = ŒΩ then 1 else 0 := by
  erw [stdBasis, Pi.basisFun_apply, LinearMap.stdBasis_apply']

lemma stdBasis_not_eq {Œº ŒΩ : Fin 4} (h : Œº ‚â† ŒΩ) : stdBasis Œº ŒΩ = 0 := by
  rw [stdBasis_apply]
  exact if_neg h

lemma stdBasis_0 : stdBasis 0 = ![1, 0, 0, 0] := by
  funext i
  fin_cases i
    <;> simp [stdBasis_apply]

lemma stdBasis_1 : stdBasis 1 = ![0, 1, 0, 0] := by
  funext i
  fin_cases i
    <;> simp [stdBasis_apply]

lemma stdBasis_2 : stdBasis 2 = ![0, 0, 1, 0] := by
  funext i
  fin_cases i
    <;> simp [stdBasis_apply]

lemma stdBasis_3 : stdBasis 3 = ![0, 0, 0, 1] := by
  funext i
  fin_cases i
    <;> simp [stdBasis_apply]

lemma stdBasis_mulVec (Œº ŒΩ : Fin 4) (Œõ : Matrix (Fin 4) (Fin 4) ‚Ñù) :
    (Œõ *·µ• stdBasis Œº) ŒΩ = Œõ ŒΩ Œº := by
  rw [mulVec, dotProduct, Fintype.sum_eq_single Œº, stdBasis_apply]
  simp
  intro x h
  rw [stdBasis_apply, if_neg (Ne.symm h)]
  simp



lemma explicit (x : spaceTime) : x = ![x 0, x 1, x 2, x 3] := by
  funext i
  fin_cases i <;> rfl



def Œ∑ : Matrix (Fin 4) (Fin 4) ‚Ñù :=
  ![![1, 0, 0, 0], ![0, -1, 0, 0], ![0, 0, -1, 0], ![0, 0, 0, -1]]

lemma Œ∑_off_diagonal {Œº ŒΩ : Fin 4} (h : Œº ‚â† ŒΩ) : Œ∑ Œº ŒΩ = 0 := by
  fin_cases Œº <;>
    fin_cases ŒΩ <;>
      simp_all [Œ∑, Fin.zero_eta, Matrix.cons_val', Matrix.cons_val_fin_one, Matrix.cons_val_one,
      Matrix.cons_val_succ', Matrix.cons_val_zero, Matrix.empty_val', Matrix.head_cons,
      Matrix.head_fin_const, Matrix.head_cons, Matrix.vecCons_const, Fin.mk_one, Fin.mk_one,
      vecHead, vecTail, Function.comp_apply]

lemma Œ∑_symmetric (Œº ŒΩ : Fin 4) : Œ∑ Œº ŒΩ = Œ∑ ŒΩ Œº := by
  by_cases h : Œº = ŒΩ
  rw [h]
  rw [Œ∑_off_diagonal h]
  refine (Œ∑_off_diagonal ?_).symm
  exact fun a => h (id a.symm)

lemma Œ∑_transpose : Œ∑.transpose = Œ∑ := by
  funext Œº ŒΩ
  rw [transpose_apply, Œ∑_symmetric]

lemma Œ∑_sq : Œ∑ * Œ∑ = 1 := by
  funext Œº ŒΩ
  rw [mul_apply, Fin.sum_univ_four]
  fin_cases Œº <;> fin_cases ŒΩ <;>
     simp [Œ∑, Fin.zero_eta, Matrix.cons_val', Matrix.cons_val_fin_one, Matrix.cons_val_one,
      Matrix.cons_val_succ', Matrix.cons_val_zero, Matrix.empty_val', Matrix.head_cons,
      Matrix.head_fin_const, Matrix.head_cons, Matrix.vecCons_const, Fin.mk_one, Fin.mk_one,
      vecHead, vecTail, Function.comp_apply]



lemma Œ∑_mulVec (x : spaceTime) : Œ∑ *·µ• x = ![x 0, -x 1, -x 2, -x 3] := by
  rw [explicit x]
  rw [Œ∑]
  funext i
  rw [mulVec, dotProduct, Fin.sum_univ_four]
  fin_cases i <;>
    simp [Œ∑, Fin.zero_eta, Matrix.cons_val', Matrix.cons_val_fin_one, Matrix.cons_val_one,
      Matrix.cons_val_succ', Matrix.cons_val_zero, Matrix.empty_val', Matrix.head_cons,
      Matrix.head_fin_const, Matrix.head_cons, Matrix.vecCons_const, Fin.mk_one, Fin.mk_one,
      vecHead, vecTail, Function.comp_apply]

@[simps!]
def linearMapForSpaceTime (x : spaceTime) : spaceTime ‚Üí‚Çó[‚Ñù] ‚Ñù where
  toFun y := x ‚¨ù·µ• (Œ∑ *·µ• y)
  map_add' y z := by
    simp only
    rw [mulVec_add, dotProduct_add]
  map_smul' c y := by
    simp only
    rw [mulVec_smul, dotProduct_smul]
    rfl

@[simps!]
def Œ∑Lin : LinearMap.BilinForm ‚Ñù spaceTime where
  toFun x := linearMapForSpaceTime x
  map_add' x y := by
    apply LinearMap.ext
    intro z
    simp only [linearMapForSpaceTime_apply, LinearMap.add_apply]
    rw [add_dotProduct]
  map_smul' c x := by
    apply LinearMap.ext
    intro z
    simp only [linearMapForSpaceTime_apply, RingHom.id_apply, LinearMap.smul_apply, smul_eq_mul]
    rw [smul_dotProduct]
    rfl

lemma Œ∑Lin_expand (x y : spaceTime) : Œ∑Lin x y = x 0 * y 0 - x 1 * y 1 - x 2 * y 2 - x 3 * y 3 := by
  rw [Œ∑Lin]
  simp only [LinearMap.coe_mk, AddHom.coe_mk, linearMapForSpaceTime_apply, Fin.isValue]
  erw [Œ∑_mulVec]
  nth_rewrite 1 [explicit x]
  simp only [dotProduct, Nat.succ_eq_add_one, Nat.reduceAdd, Fin.isValue, Fin.sum_univ_four,
    cons_val_zero, cons_val_one, head_cons, mul_neg, cons_val_two, tail_cons, cons_val_three]
  ring

lemma Œ∑Lin_symm (x y : spaceTime) : Œ∑Lin x y = Œ∑Lin y x := by
  rw [Œ∑Lin_expand, Œ∑Lin_expand]
  ring

lemma Œ∑Lin_stdBasis_apply (Œº : Fin 4) (x : spaceTime) : Œ∑Lin (stdBasis Œº) x = Œ∑ Œº Œº * x Œº := by
  rw [Œ∑Lin_expand]
  fin_cases Œº
   <;> simp [stdBasis_0, stdBasis_1, stdBasis_2, stdBasis_3, Œ∑]


lemma Œ∑Lin_Œ∑_stdBasis (Œº ŒΩ : Fin 4) : Œ∑Lin (stdBasis Œº) (stdBasis ŒΩ) = Œ∑ Œº ŒΩ := by
  rw [Œ∑Lin_stdBasis_apply]
  by_cases h : Œº = ŒΩ
  rw [stdBasis_apply]
  subst h
  simp
  rw [stdBasis_not_eq, Œ∑_off_diagonal h]
  simp
  exact fun a => h (id a.symm)

lemma Œ∑Lin_mulVec_left (x y : spaceTime) (Œõ : Matrix (Fin 4) (Fin 4) ‚Ñù) :
    Œ∑Lin (Œõ *·µ• x) y = Œ∑Lin x ((Œ∑ * Œõ·µÄ * Œ∑) *·µ• y) := by
  simp only [Œ∑Lin_apply_apply, mulVec_mulVec]
  rw [(vecMul_transpose Œõ x).symm, ‚Üê dotProduct_mulVec, mulVec_mulVec]
  rw [‚Üê mul_assoc, ‚Üê mul_assoc, Œ∑_sq, one_mul]

lemma Œ∑Lin_mulVec_right (x y : spaceTime) (Œõ : Matrix (Fin 4) (Fin 4) ‚Ñù) :
    Œ∑Lin x (Œõ *·µ• y) = Œ∑Lin ((Œ∑ * Œõ·µÄ * Œ∑) *·µ• x) y := by
  rw [Œ∑Lin_symm, Œ∑Lin_symm ((Œ∑ * Œõ·µÄ * Œ∑) *·µ• x) _ ]
  exact Œ∑Lin_mulVec_left y x Œõ

lemma Œ∑Lin_matrix_stdBasis (Œº ŒΩ : Fin 4) (Œõ : Matrix (Fin 4) (Fin 4) ‚Ñù) :
    Œ∑Lin (stdBasis ŒΩ) (Œõ *·µ• stdBasis Œº)  = Œ∑ ŒΩ ŒΩ * Œõ ŒΩ Œº := by
  rw [Œ∑Lin_stdBasis_apply, stdBasis_mulVec]

lemma Œ∑Lin_matrix_eq_identity_iff (Œõ : Matrix (Fin 4) (Fin 4) ‚Ñù) :
    Œõ = 1 ‚Üî ‚àÄ (x y : spaceTime), Œ∑Lin x y = Œ∑Lin x (Œõ *·µ• y) := by
  apply Iff.intro
  intro h
  subst h
  simp
  intro h
  funext Œº ŒΩ
  have h1 := h (stdBasis Œº) (stdBasis ŒΩ)
  rw [Œ∑Lin_matrix_stdBasis, Œ∑Lin_Œ∑_stdBasis] at h1
  fin_cases Œº <;> fin_cases ŒΩ <;>
    simp_all [Œ∑, Fin.zero_eta, Matrix.cons_val', Matrix.cons_val_fin_one, Matrix.cons_val_one,
      Matrix.cons_val_succ', Matrix.cons_val_zero, Matrix.empty_val', Matrix.head_cons,
      Matrix.head_fin_const, Matrix.head_cons, Matrix.vecCons_const, Fin.mk_one, Fin.mk_one,
      vecHead, vecTail, Function.comp_apply]


def quadraticForm : QuadraticForm ‚Ñù spaceTime := Œ∑Lin.toQuadraticForm

def lorentzGroup : Subgroup (GeneralLinearGroup (Fin 4) ‚Ñù) where
  carrier := {Œõ | ‚àÄ (x y : spaceTime), Œ∑Lin (Œõ *·µ• x) (Œõ *·µ• y) = Œ∑Lin x y}
  mul_mem' {a b} := by
    intros ha hb x y
    simp only [Units.val_mul, mulVec_mulVec]
    rw [‚Üê mulVec_mulVec, ‚Üê mulVec_mulVec, ha, hb]
  one_mem' := by
    intros x y
    simp
  inv_mem' {a} := by
    intros ha x y
    simp only [coe_units_inv, ‚Üê ha ((a.1‚Åª¬π) *·µ• x) ((a.1‚Åª¬π) *·µ• y), mulVec_mulVec]
    have hx : (a.1 * (a.1)‚Åª¬π) = 1 := by
      simp only [@Units.mul_eq_one_iff_inv_eq, coe_units_inv]
    simp [hx]


lemma mem_lorentzGroup_iff (Œõ : GeneralLinearGroup (Fin 4) ‚Ñù) :
    Œõ ‚àà lorentzGroup ‚Üî ‚àÄ (x y : spaceTime), Œ∑Lin (Œõ *·µ• x) (Œõ *·µ• y) = Œ∑Lin x y := by
  rfl

lemma mem_lorentzGroup_iff' (Œõ : GeneralLinearGroup (Fin 4) ‚Ñù) :
    Œõ ‚àà lorentzGroup ‚Üî ‚àÄ (x y : spaceTime), Œ∑Lin (x) ((Œ∑ * Œõ.1·µÄ * Œ∑ * Œõ.1) *·µ• y) = Œ∑Lin x y := by
  rw [mem_lorentzGroup_iff]
  apply Iff.intro
  intro h
  intro x y
  have h1 := h x y
  rw [Œ∑Lin_mulVec_left, mulVec_mulVec] at h1
  exact h1
  intro h
  intro x y
  rw [Œ∑Lin_mulVec_left, mulVec_mulVec]
  exact h x y

lemma mem_lorentzGroup_iff'' (Œõ : GeneralLinearGroup (Fin 4) ‚Ñù) :
    Œõ ‚àà lorentzGroup ‚Üî Œ∑ * Œõ.1·µÄ * Œ∑ * Œõ.1 = 1 := by
  rw [mem_lorentzGroup_iff', Œ∑Lin_matrix_eq_identity_iff (Œ∑ * Œõ.1·µÄ * Œ∑ * Œõ.1)]
  apply Iff.intro
  ¬∑ simp_all only [Œ∑Lin_apply_apply, implies_true, iff_true, one_mulVec]
  ¬∑ simp_all only [Œ∑Lin_apply_apply, mulVec_mulVec, implies_true]

abbrev cliffordAlgebra := CliffordAlgebra quadraticForm

end spaceTime

end spaceTime

/-- The global gauge group of the standard model. TODO: Generalize to quotient. -/
abbrev gaugeGroup : Type :=
  specialUnitaryGroup (Fin 3) ‚ÑÇ √ó specialUnitaryGroup (Fin 2) ‚ÑÇ √ó unitary ‚ÑÇ

end StandardModel
