/-
Copyright (c) 2024 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license.
Authors: Joseph Tooby-Smith
-/
import HepLean.SpaceTime.Metric
import HepLean.SpaceTime.AsSelfAdjointMatrix
/-!
# The Lorentz Group

We define the Lorentz group.

## TODO

- Show that the Lorentz is a Lie group.
- Prove that the restricted Lorentz group is equivalent to the connected component of the
identity.
- Define the continuous maps from `‚Ñù¬≥` to `restrictedLorentzGroup` defining boosts.

## References

- http://home.ku.edu.tr/~amostafazadeh/phys517_518/phys517_2016f/Handouts/A_Jaffi_Lorentz_Group.pdf

-/


noncomputable section

namespace spaceTime

open Manifold
open Matrix
open Complex
open ComplexConjugate

/-!
## Matrices which preserve `Œ∑Lin`

We start studying the properties of matrices which preserve `Œ∑Lin`.
These matrices form the Lorentz group, which we will define in the next section at `lorentzGroup`.

-/

/-- We say a matrix `Œõ` preserves `Œ∑Lin` if for all `x` and `y`,
  `Œ∑Lin (Œõ *·µ• x) (Œõ *·µ• y) = Œ∑Lin x y`.  -/
def PreservesŒ∑Lin (Œõ : Matrix (Fin 4) (Fin 4) ‚Ñù) : Prop :=
  ‚àÄ (x y : spaceTime), Œ∑Lin (Œõ *·µ• x) (Œõ *·µ• y) = Œ∑Lin x y

namespace PreservesŒ∑Lin

variable  (Œõ : Matrix (Fin 4) (Fin 4) ‚Ñù)

lemma iff_norm : PreservesŒ∑Lin Œõ ‚Üî
    ‚àÄ (x : spaceTime), Œ∑Lin (Œõ *·µ• x) (Œõ *·µ• x) = Œ∑Lin x x := by
  refine Iff.intro (fun h x => h x x) (fun h x y => ?_)
  have hp := h (x + y)
  have hn := h (x - y)
  rw [mulVec_add] at hp
  rw [mulVec_sub] at hn
  simp only [map_add, LinearMap.add_apply, map_sub, LinearMap.sub_apply] at hp hn
  rw [Œ∑Lin_symm (Œõ *·µ• y) (Œõ *·µ• x), Œ∑Lin_symm y x] at hp hn
  linear_combination hp / 4 + -1 * hn / 4

lemma iff_det_selfAdjoint : PreservesŒ∑Lin Œõ ‚Üî
    ‚àÄ (x : selfAdjoint (Matrix (Fin 2) (Fin 2) ‚ÑÇ)),
    det ((toSelfAdjointMatrix ‚àò toLin stdBasis stdBasis Œõ ‚àò toSelfAdjointMatrix.symm) x).1
    = det x.1 := by
  rw [iff_norm]
  apply Iff.intro
  intro h x
  have h1 := congrArg ofReal $ h (toSelfAdjointMatrix.symm x)
  simpa [‚Üê det_eq_Œ∑Lin] using h1
  intro h x
  have h1 := h (toSelfAdjointMatrix x)
  simpa [det_eq_Œ∑Lin] using h1

lemma iff_on_right : PreservesŒ∑Lin Œõ ‚Üî
    ‚àÄ (x y : spaceTime), Œ∑Lin x ((Œ∑ * Œõ·µÄ * Œ∑ * Œõ) *·µ• y) = Œ∑Lin x y := by
  apply Iff.intro
  intro h x y
  have h1 := h x y
  rw [Œ∑Lin_mulVec_left, mulVec_mulVec] at h1
  exact h1
  intro h x y
  rw [Œ∑Lin_mulVec_left, mulVec_mulVec]
  exact h x y

lemma iff_matrix : PreservesŒ∑Lin Œõ ‚Üî Œ∑ * Œõ·µÄ * Œ∑ * Œõ = 1  := by
  rw [iff_on_right, Œ∑Lin_matrix_eq_identity_iff (Œ∑ * Œõ·µÄ * Œ∑ * Œõ)]
  apply Iff.intro
  ¬∑ simp_all  [Œ∑Lin, implies_true, iff_true, one_mulVec]
  ¬∑ exact fun a x y => Eq.symm (Real.ext_cauchy (congrArg Real.cauchy (a x y)))

lemma iff_matrix' : PreservesŒ∑Lin Œõ ‚Üî Œõ * (Œ∑ * Œõ·µÄ * Œ∑) = 1  := by
  rw [iff_matrix]
  exact mul_eq_one_comm


lemma iff_transpose : PreservesŒ∑Lin Œõ ‚Üî PreservesŒ∑Lin Œõ·µÄ := by
  apply Iff.intro
  intro h
  have h1 := congrArg transpose ((iff_matrix Œõ).mp h)
  rw [transpose_mul, transpose_mul, transpose_mul, Œ∑_transpose,
    ‚Üê mul_assoc, transpose_one] at h1
  rw [iff_matrix' Œõ.transpose, ‚Üê h1]
  noncomm_ring
  intro h
  have h1 := congrArg transpose ((iff_matrix Œõ.transpose).mp h)
  rw [transpose_mul, transpose_mul, transpose_mul, Œ∑_transpose,
    ‚Üê mul_assoc, transpose_one, transpose_transpose] at h1
  rw [iff_matrix', ‚Üê h1]
  noncomm_ring

/-- The lift of a matrix which preserves `Œ∑Lin` to an invertible matrix. -/
def liftGL {Œõ : Matrix (Fin 4) (Fin 4) ‚Ñù} (h : PreservesŒ∑Lin Œõ) : GL (Fin 4) ‚Ñù :=
  ‚ü®Œõ, Œ∑ * Œõ·µÄ * Œ∑ , (iff_matrix' Œõ).mp h , (iff_matrix Œõ).mp h‚ü©

lemma mul {Œõ Œõ' : Matrix (Fin 4) (Fin 4) ‚Ñù} (h : PreservesŒ∑Lin Œõ) (h' : PreservesŒ∑Lin Œõ') :
    PreservesŒ∑Lin (Œõ * Œõ') := by
  intro x y
  rw [‚Üê mulVec_mulVec, ‚Üê mulVec_mulVec, h, h']

lemma one : PreservesŒ∑Lin 1 := by
  intro x y
  simp

lemma Œ∑ : PreservesŒ∑Lin Œ∑ := by
  simp [iff_matrix, Œ∑_transpose, Œ∑_sq]

end PreservesŒ∑Lin

/-!
## The Lorentz group

We define the Lorentz group as the set of matrices which preserve `Œ∑Lin`.
We show that the Lorentz group is indeed a group.

-/

/-- The Lorentz group is the subset of matrices which preserve Œ∑Lin. -/
def lorentzGroup : Type := {Œõ : Matrix (Fin 4) (Fin 4) ‚Ñù // PreservesŒ∑Lin Œõ}

@[simps mul_coe one_coe inv div]
instance lorentzGroupIsGroup : Group lorentzGroup where
  mul A B := ‚ü®A.1 * B.1, PreservesŒ∑Lin.mul A.2 B.2‚ü©
  mul_assoc A B C := by
    apply Subtype.eq
    exact Matrix.mul_assoc A.1 B.1 C.1
  one := ‚ü®1, PreservesŒ∑Lin.one‚ü©
  one_mul A := by
    apply Subtype.eq
    exact Matrix.one_mul A.1
  mul_one A := by
    apply Subtype.eq
    exact Matrix.mul_one A.1
  inv A := ‚ü®Œ∑ * A.1·µÄ * Œ∑ , PreservesŒ∑Lin.mul (PreservesŒ∑Lin.mul PreservesŒ∑Lin.Œ∑
    ((PreservesŒ∑Lin.iff_transpose A.1).mp A.2)) PreservesŒ∑Lin.Œ∑‚ü©
  mul_left_inv A := by
    apply Subtype.eq
    exact (PreservesŒ∑Lin.iff_matrix A.1).mp A.2

/-- Notation for the Lorentz group. -/
scoped[spaceTime] notation (name := lorentzGroup_notation) "ùìõ" => lorentzGroup


/-- `lorentzGroup` has the subtype topology. -/
instance : TopologicalSpace lorentzGroup := instTopologicalSpaceSubtype

namespace lorentzGroup

lemma coe_inv (A : ùìõ) : (A‚Åª¬π).1 = A.1‚Åª¬π:= by
  refine (inv_eq_left_inv ?h).symm
  exact (PreservesŒ∑Lin.iff_matrix A.1).mp A.2

/-- The transpose of an matrix in the Lorentz group is an element of the Lorentz group. -/
def transpose (Œõ : lorentzGroup) : lorentzGroup := ‚ü®Œõ.1·µÄ, (PreservesŒ∑Lin.iff_transpose Œõ.1).mp Œõ.2‚ü©

/-!

## Lorentz group as a topological group

We now show that the Lorentz group is a topological group.
We do this by showing that the natrual map from the Lorentz group to `GL (Fin 4) ‚Ñù` is an
embedding.

-/

/-- The homomorphism of the Lorentz group into `GL (Fin 4) ‚Ñù`. -/
def toGL : ùìõ ‚Üí* GL (Fin 4) ‚Ñù where
  toFun A := ‚ü®A.1, (A‚Åª¬π).1, mul_eq_one_comm.mpr $ (PreservesŒ∑Lin.iff_matrix A.1).mp A.2,
    (PreservesŒ∑Lin.iff_matrix A.1).mp A.2‚ü©
  map_one' := by
    simp
    rfl
  map_mul' x y  := by
    simp only [lorentzGroupIsGroup, _root_.mul_inv_rev, coe_inv]
    ext
    rfl

lemma toGL_injective : Function.Injective toGL := by
  intro A B h
  apply Subtype.eq
  rw [@Units.ext_iff] at h
  exact h

/-- The homomorphism from the Lorentz Group into the monoid of matrices times the opposite of
  the monoid of matrices. -/
@[simps!]
def toProd : ùìõ ‚Üí* (Matrix (Fin 4) (Fin 4) ‚Ñù) √ó (Matrix (Fin 4) (Fin 4) ‚Ñù)·µê·µí·µñ :=
  MonoidHom.comp (Units.embedProduct _) toGL

lemma toProd_eq_transpose_Œ∑  : toProd A = (A.1, ‚ü®Œ∑ * A.1·µÄ * Œ∑‚ü©) := rfl

lemma toProd_injective : Function.Injective toProd := by
  intro A B h
  rw [toProd_eq_transpose_Œ∑, toProd_eq_transpose_Œ∑] at h
  rw [@Prod.mk.inj_iff] at h
  apply Subtype.eq
  exact h.1

lemma toProd_continuous : Continuous toProd := by
  change Continuous (fun A => (A.1, ‚ü®Œ∑ * A.1·µÄ * Œ∑‚ü©))
  refine continuous_prod_mk.mpr (And.intro ?_ ?_)
  exact continuous_iff_le_induced.mpr fun U a => a
  refine Continuous.comp' ?_ ?_
  exact MulOpposite.continuous_op
  refine Continuous.matrix_mul (Continuous.matrix_mul continuous_const ?_) continuous_const
  refine Continuous.matrix_transpose ?_
  exact continuous_iff_le_induced.mpr fun U a => a

/-- The embedding from the Lorentz Group into the monoid of matrices times the opposite of
  the monoid of matrices. -/
lemma toProd_embedding : Embedding toProd where
  inj := toProd_injective
  induced := by
    refine (inducing_iff ‚áëtoProd).mp ?_
    refine inducing_of_inducing_compose toProd_continuous continuous_fst ?hgf
    exact (inducing_iff (Prod.fst ‚àò ‚áëtoProd)).mpr rfl

/-- The embedding from the Lorentz Group into `GL (Fin 4) ‚Ñù`. -/
lemma toGL_embedding : Embedding toGL.toFun where
  inj := toGL_injective
  induced := by
    refine ((fun {X} {t t'} => TopologicalSpace.ext_iff.mpr) ?_).symm
    intro s
    rw [TopologicalSpace.ext_iff.mp toProd_embedding.induced s ]
    rw [isOpen_induced_iff, isOpen_induced_iff]
    exact exists_exists_and_eq_and


instance : TopologicalGroup ùìõ := Inducing.topologicalGroup toGL toGL_embedding.toInducing



end lorentzGroup


end spaceTime
