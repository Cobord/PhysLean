/-
Copyright (c) 2024 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license.
Authors: Joseph Tooby-Smith
-/
import HepLean.SpaceTime.LorentzGroup.Basic
import Mathlib.RepresentationTheory.Basic
import HepLean.SpaceTime.LorentzVector.AsSelfAdjointMatrix
/-!
# The group SL(2, ‚ÑÇ) and it's relation to the Lorentz group

The aim of this file is to give the relationship between `SL(2, ‚ÑÇ)` and the Lorentz group.

-/
namespace SpaceTime

open Matrix
open MatrixGroups
open Complex

namespace SL2C

open SpaceTime

noncomputable section

/-!

## Representation of SL(2, ‚ÑÇ) on spacetime

Through the correspondence between spacetime and self-adjoint matrices,
we can define a representation a representation of `SL(2, ‚ÑÇ)` on spacetime.

-/

/-- Given an element  `M ‚àà SL(2, ‚ÑÇ)` the linear map from `selfAdjoint (Matrix (Fin 2) (Fin 2) ‚ÑÇ)` to
 itself defined by  `A ‚Ü¶ M * A * M·¥¥`. -/
@[simps!]
def toLinearMapSelfAdjointMatrix (M : SL(2, ‚ÑÇ)) :
    selfAdjoint (Matrix (Fin 2) (Fin 2) ‚ÑÇ) ‚Üí‚Çó[‚Ñù] selfAdjoint (Matrix (Fin 2) (Fin 2) ‚ÑÇ) where
  toFun A := ‚ü®M.1 * A.1 * Matrix.conjTranspose M,
    by
      noncomm_ring [selfAdjoint.mem_iff, star_eq_conjTranspose,
        conjTranspose_mul, conjTranspose_conjTranspose,
        (star_eq_conjTranspose A.1).symm.trans $ selfAdjoint.mem_iff.mp A.2]‚ü©
  map_add' A B := by
    noncomm_ring [AddSubmonoid.coe_add, AddSubgroup.coe_toAddSubmonoid, AddSubmonoid.mk_add_mk,
      Subtype.mk.injEq]
  map_smul' r A := by
    noncomm_ring [selfAdjoint.val_smul, Algebra.mul_smul_comm, Algebra.smul_mul_assoc,
      RingHom.id_apply]

/-- The representation of  `SL(2, ‚ÑÇ)` on `selfAdjoint (Matrix (Fin 2) (Fin 2) ‚ÑÇ)` given by
   `M A ‚Ü¶ M * A * M·¥¥`. -/
@[simps!]
def repSelfAdjointMatrix : Representation ‚Ñù SL(2, ‚ÑÇ) $ selfAdjoint (Matrix (Fin 2) (Fin 2) ‚ÑÇ) where
  toFun := toLinearMapSelfAdjointMatrix
  map_one' := by
    noncomm_ring [toLinearMapSelfAdjointMatrix, SpecialLinearGroup.coe_one, one_mul,
      conjTranspose_one, mul_one, Subtype.coe_eta]
  map_mul' M N := by
    ext x i j : 3
    noncomm_ring [toLinearMapSelfAdjointMatrix, SpecialLinearGroup.coe_mul, mul_assoc,
      conjTranspose_mul, LinearMap.coe_mk, AddHom.coe_mk, LinearMap.mul_apply]

/-- The representation of  `SL(2, ‚ÑÇ)` on `spaceTime` obtained from `toSelfAdjointMatrix` and
  `repSelfAdjointMatrix`. -/
def repLorentzVector : Representation ‚Ñù SL(2, ‚ÑÇ) (LorentzVector 3) where
  toFun M := toSelfAdjointMatrix.symm.comp ((repSelfAdjointMatrix M).comp
    toSelfAdjointMatrix.toLinearMap)
  map_one' := by
    ext
    simp
  map_mul' M N := by
    ext x : 3
    simp

/-!

## Homomorphism to the Lorentz group

There is a group homomorphism from `SL(2, ‚ÑÇ)` to the Lorentz group `ùìõ`.
The purpose of this section is to define this homomorphism.
In the next section we will restrict this homomorphism to the restricted Lorentz group.

-/

lemma iff_det_selfAdjoint (Œõ : Matrix (Fin 1 ‚äï Fin 3) (Fin 1 ‚äï Fin 3) ‚Ñù):  Œõ ‚àà LorentzGroup 3 ‚Üî
    ‚àÄ (x : selfAdjoint (Matrix (Fin 2) (Fin 2) ‚ÑÇ)),
    det ((toSelfAdjointMatrix ‚àò
    toLin LorentzVector.stdBasis LorentzVector.stdBasis Œõ ‚àò toSelfAdjointMatrix.symm) x).1
    = det x.1 := by
  rw [LorentzGroup.mem_iff_norm]
  apply Iff.intro
  intro h x
  have h1 := congrArg ofReal $ h (toSelfAdjointMatrix.symm x)
  simpa [‚Üê det_eq_Œ∑Lin] using h1
  intro h x
  have h1 := h (toSelfAdjointMatrix x)
  simpa [det_eq_Œ∑Lin] using h1

/-- Given an element `M ‚àà SL(2, ‚ÑÇ)` the corresponding element of the Lorentz group. -/
@[simps!]
def toLorentzGroupElem (M : SL(2, ‚ÑÇ)) : LorentzGroup 3 :=
  ‚ü®LinearMap.toMatrix LorentzVector.stdBasis LorentzVector.stdBasis (repLorentzVector M) ,
   by simp [repLorentzVector, iff_det_selfAdjoint]‚ü©

/-- The group homomorphism from ` SL(2, ‚ÑÇ)` to the Lorentz group `ùìõ`. -/
@[simps!]
def toLorentzGroup : SL(2, ‚ÑÇ) ‚Üí* LorentzGroup 3  where
  toFun := toLorentzGroupElem
  map_one' := by
    simp only [toLorentzGroupElem, _root_.map_one, LinearMap.toMatrix_one]
    rfl
  map_mul' M N := by
    apply Subtype.eq
    simp only [toLorentzGroupElem, _root_.map_mul, LinearMap.toMatrix_mul,
      lorentzGroupIsGroup_mul_coe]

/-!

## Homomorphism to the restricted Lorentz group

The homomorphism `toLorentzGroup` restricts to a homomorphism to the restricted Lorentz group.
In this section we will define this homomorphism.

### TODO

Complete this section.

-/



end
end SL2C

end SpaceTime
