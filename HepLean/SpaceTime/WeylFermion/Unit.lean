/-
Copyright (c) 2024 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import HepLean.SpaceTime.WeylFermion.Basic
import HepLean.SpaceTime.WeylFermion.Contraction
import Mathlib.LinearAlgebra.TensorProduct.Matrix
import HepLean.SpaceTime.WeylFermion.Two
/-!

# Units of Weyl fermions

We define the units for Weyl fermions, often denoted `Œ¥` in the literature.

-/

namespace Fermion
noncomputable section

open Matrix
open MatrixGroups
open Complex
open TensorProduct
open CategoryTheory.MonoidalCategory

/-- The left-alt-left unit `Œ¥‚Çê·µÉ` as an element of `(leftHanded ‚äó altLeftHanded).V`. -/
def leftAltLeftUnitVal : (leftHanded ‚äó altLeftHanded).V :=
  leftAltLeftToMatrix.symm 1

/-- The left-alt-left unit `Œ¥‚Çê·µÉ` as a morphism `ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ leftHanded ‚äó altLeftHanded `,
  manifesting the invariance under the `SL(2,‚ÑÇ)` action. -/
def leftAltLeftUnit : ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ leftHanded ‚äó altLeftHanded where
  hom := {
    toFun := fun a =>
      let a' : ‚ÑÇ := a
      a' ‚Ä¢ leftAltLeftUnitVal,
    map_add' := fun x y => by
      simp only [add_smul]
    map_smul' := fun m x => by
      simp only [smul_smul]
      rfl}
  comm M := by
    ext x : 2
    simp only [Action.instMonoidalCategory_tensorObj_V, Action.instMonoidalCategory_tensorUnit_V,
      Action.tensorUnit_œÅ', CategoryTheory.Category.id_comp, Action.tensor_œÅ', ModuleCat.coe_comp,
      Function.comp_apply]
    let x' : ‚ÑÇ := x
    change x' ‚Ä¢ leftAltLeftUnitVal =
      (TensorProduct.map (leftHanded.œÅ M) (altLeftHanded.œÅ M)) (x' ‚Ä¢ leftAltLeftUnitVal)
    simp only [Action.instMonoidalCategory_tensorObj_V, _root_.map_smul]
    apply congrArg
    simp only [Action.instMonoidalCategory_tensorObj_V, leftAltLeftUnitVal]
    erw [leftAltLeftToMatrix_œÅ_symm]
    apply congrArg
    simp

/-- The alt-left-left unit `Œ¥·µÉ‚Çê` as an element of `(altLeftHanded ‚äó leftHanded).V`. -/
def altLeftLeftUnitVal : (altLeftHanded ‚äó leftHanded).V :=
  altLeftLeftToMatrix.symm 1

/-- The alt-left-left unit `Œ¥·µÉ‚Çê` as a morphism `ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ altLeftHanded ‚äó leftHanded `,
  manifesting the invariance under the `SL(2,‚ÑÇ)` action. -/
def altLeftLeftUnit : ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ altLeftHanded ‚äó leftHanded where
  hom := {
    toFun := fun a =>
      let a' : ‚ÑÇ := a
      a' ‚Ä¢ altLeftLeftUnitVal,
    map_add' := fun x y => by
      simp only [add_smul]
    map_smul' := fun m x => by
      simp only [smul_smul]
      rfl}
  comm M := by
    ext x : 2
    simp only [Action.instMonoidalCategory_tensorObj_V, Action.instMonoidalCategory_tensorUnit_V,
      Action.tensorUnit_œÅ', CategoryTheory.Category.id_comp, Action.tensor_œÅ', ModuleCat.coe_comp,
      Function.comp_apply]
    let x' : ‚ÑÇ := x
    change x' ‚Ä¢ altLeftLeftUnitVal =
      (TensorProduct.map (altLeftHanded.œÅ M) (leftHanded.œÅ M)) (x' ‚Ä¢ altLeftLeftUnitVal)
    simp only [Action.instMonoidalCategory_tensorObj_V, _root_.map_smul]
    apply congrArg
    simp [altLeftLeftUnitVal]
    erw [altLeftLeftToMatrix_œÅ_symm]
    apply congrArg
    simp only [mul_one, ‚Üê transpose_mul, SpecialLinearGroup.det_coe, isUnit_iff_ne_zero, ne_eq,
      one_ne_zero, not_false_eq_true, mul_nonsing_inv, transpose_one]

/-- The right-alt-right unit `Œ¥_{dot a}^{dot a}` as an element of
  `(rightHanded ‚äó altRightHanded).V`. -/
def rightAltRightUnitVal : (rightHanded ‚äó altRightHanded).V :=
  rightAltRightToMatrix.symm 1

/-- The right-alt-right unit `Œ¥_{dot a}^{dot a}` as a morphism
  `ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ rightHanded ‚äó altRightHanded`, manifesting
  the invariance under the `SL(2,‚ÑÇ)` action. -/
def rightAltRightUnit : ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ rightHanded ‚äó altRightHanded where
  hom := {
    toFun := fun a =>
      let a' : ‚ÑÇ := a
      a' ‚Ä¢ rightAltRightUnitVal,
    map_add' := fun x y => by
      simp only [add_smul]
    map_smul' := fun m x => by
      simp only [smul_smul]
      rfl}
  comm M := by
    ext x : 2
    simp only [Action.instMonoidalCategory_tensorObj_V, Action.instMonoidalCategory_tensorUnit_V,
      Action.tensorUnit_œÅ', CategoryTheory.Category.id_comp, Action.tensor_œÅ', ModuleCat.coe_comp,
      Function.comp_apply]
    let x' : ‚ÑÇ := x
    change x' ‚Ä¢ rightAltRightUnitVal =
      (TensorProduct.map (rightHanded.œÅ M) (altRightHanded.œÅ M)) (x' ‚Ä¢ rightAltRightUnitVal)
    simp only [Action.instMonoidalCategory_tensorObj_V, _root_.map_smul]
    apply congrArg
    simp only [Action.instMonoidalCategory_tensorObj_V, rightAltRightUnitVal]
    erw [rightAltRightToMatrix_œÅ_symm]
    apply congrArg
    simp only [RCLike.star_def, mul_one]
    symm
    refine transpose_eq_one.mp ?h.h.h.a
    simp only [transpose_mul, transpose_transpose]
    change (M.1)‚Åª¬π·¥¥ * (M.1)·¥¥ = 1
    rw [@conjTranspose_nonsing_inv]
    simp

/-- The alt-right-right unit `Œ¥^{dot a}_{dot a}` as an element of
  `(rightHanded ‚äó altRightHanded).V`. -/
def altRightRightUnitVal : (altRightHanded ‚äó rightHanded).V :=
  altRightRightToMatrix.symm 1

/-- The alt-right-right unit `Œ¥^{dot a}_{dot a}` as a morphism
  `ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ altRightHanded ‚äó rightHanded`, manifesting
  the invariance under the `SL(2,‚ÑÇ)` action. -/
def altRightRightUnit : ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ altRightHanded ‚äó rightHanded where
  hom := {
    toFun := fun a =>
      let a' : ‚ÑÇ := a
      a' ‚Ä¢ altRightRightUnitVal,
    map_add' := fun x y => by
      simp only [add_smul]
    map_smul' := fun m x => by
      simp only [smul_smul]
      rfl}
  comm M := by
    ext x : 2
    simp only [Action.instMonoidalCategory_tensorObj_V, Action.instMonoidalCategory_tensorUnit_V,
      Action.tensorUnit_œÅ', CategoryTheory.Category.id_comp, Action.tensor_œÅ', ModuleCat.coe_comp,
      Function.comp_apply]
    let x' : ‚ÑÇ := x
    change x' ‚Ä¢ altRightRightUnitVal =
      (TensorProduct.map (altRightHanded.œÅ M) (rightHanded.œÅ M)) (x' ‚Ä¢ altRightRightUnitVal)
    simp only [Action.instMonoidalCategory_tensorObj_V, _root_.map_smul]
    apply congrArg
    simp [altRightRightUnitVal]
    erw [altRightRightToMatrix_œÅ_symm]
    apply congrArg
    simp only [mul_one, RCLike.star_def]
    symm
    change (M.1)‚Åª¬π·¥¥ * (M.1)·¥¥ = 1
    rw [@conjTranspose_nonsing_inv]
    simp

end
end Fermion
