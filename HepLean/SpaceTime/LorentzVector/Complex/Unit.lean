/-
Copyright (c) 2024 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import HepLean.SpaceTime.LorentzVector.Complex.Two
/-!

# Unit for complex Lorentz vectors

-/
noncomputable section

open Matrix
open MatrixGroups
open Complex
open TensorProduct
open SpaceTime
open CategoryTheory.MonoidalCategory
namespace Lorentz

/-- The contra-co unit for complex lorentz vectors. Usually denoted `Œ¥‚Å±·µ¢`. -/
def contrCoUnitVal : (complexContr ‚äó complexCo).V :=
  contrCoToMatrix.symm 1

/-- The contra-co unit for complex lorentz vectors as a morphism
  `ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ complexContr ‚äó complexCo`, manifesting the invaraince under
  the `SL(2, ‚ÑÇ)` action. -/
def contrCoUnit : ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ complexContr ‚äó complexCo where
  hom := {
    toFun := fun a =>
      let a' : ‚ÑÇ := a
      a' ‚Ä¢ contrCoUnitVal,
    map_add' := fun x y => by
      simp only [add_smul],
    map_smul' := fun m x => by
      simp only [smul_smul]
      rfl}
  comm M := by
    ext x : 2
    simp only [Action.instMonoidalCategory_tensorObj_V, Action.instMonoidalCategory_tensorUnit_V,
      Action.tensorUnit_œÅ', CategoryTheory.Category.id_comp, Action.tensor_œÅ', ModuleCat.coe_comp,
      Function.comp_apply]
    let x' : ‚ÑÇ := x
    change x' ‚Ä¢ contrCoUnitVal =
      (TensorProduct.map (complexContr.œÅ M) (complexCo.œÅ M)) (x' ‚Ä¢ contrCoUnitVal)
    simp only [Action.instMonoidalCategory_tensorObj_V, _root_.map_smul]
    apply congrArg
    simp only [Action.instMonoidalCategory_tensorObj_V, contrCoUnitVal]
    erw [contrCoToMatrix_œÅ_symm]
    apply congrArg
    simp

/-- The co-contra unit for complex lorentz vectors. Usually denoted `Œ¥·µ¢‚Å±`. -/
def coContrUnitVal : (complexCo ‚äó complexContr).V :=
  coContrToMatrix.symm 1

/-- The co-contra unit for complex lorentz vectors as a morphism
  `ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ complexCo ‚äó complexContr`, manifesting the invaraince under
  the `SL(2, ‚ÑÇ)` action. -/
def coContrUnit : ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ complexCo ‚äó complexContr where
  hom := {
    toFun := fun a =>
      let a' : ‚ÑÇ := a
      a' ‚Ä¢ coContrUnitVal,
    map_add' := fun x y => by
      simp only [add_smul],
    map_smul' := fun m x => by
      simp only [smul_smul]
      rfl}
  comm M := by
    ext x : 2
    simp only [Action.instMonoidalCategory_tensorObj_V, Action.instMonoidalCategory_tensorUnit_V,
      Action.tensorUnit_œÅ', CategoryTheory.Category.id_comp, Action.tensor_œÅ', ModuleCat.coe_comp,
      Function.comp_apply]
    let x' : ‚ÑÇ := x
    change x' ‚Ä¢ coContrUnitVal =
      (TensorProduct.map (complexCo.œÅ M) (complexContr.œÅ M)) (x' ‚Ä¢ coContrUnitVal)
    simp only [Action.instMonoidalCategory_tensorObj_V, _root_.map_smul]
    apply congrArg
    simp only [Action.instMonoidalCategory_tensorObj_V, coContrUnitVal]
    erw [coContrToMatrix_œÅ_symm]
    apply congrArg
    symm
    refine transpose_eq_one.mp ?h.h.h.a
    simp

end Lorentz
end
