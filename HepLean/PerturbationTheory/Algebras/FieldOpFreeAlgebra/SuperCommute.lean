/-
Copyright (c) 2025 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import HepLean.PerturbationTheory.Algebras.FieldOpFreeAlgebra.Basic
import HepLean.PerturbationTheory.Algebras.FieldOpFreeAlgebra.Grading
/-!

# Super Commute
-/

namespace FieldSpecification
variable {ùìï : FieldSpecification}

namespace FieldOpFreeAlgebra

/-!

## The super commutor on the FieldOpFreeAlgebra.

-/

open FieldStatistic

/-- The super commutor on the creation and annihlation algebra. For two bosonic operators
  or a bosonic and fermionic operator this corresponds to the usual commutator
  whilst for two fermionic operators this corresponds to the anti-commutator. -/
noncomputable def superCommuteF : ùìï.FieldOpFreeAlgebra ‚Üí‚Çó[‚ÑÇ] ùìï.FieldOpFreeAlgebra ‚Üí‚Çó[‚ÑÇ] ùìï.FieldOpFreeAlgebra :=
  Basis.constr ofCrAnListBasis ‚ÑÇ fun œÜs =>
  Basis.constr ofCrAnListBasis ‚ÑÇ fun œÜs' =>
  ofCrAnList (œÜs ++ œÜs') - ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofCrAnList (œÜs' ++ œÜs)

/-- The super commutor on the creation and annihlation algebra. For two bosonic operators
  or a bosonic and fermionic operator this corresponds to the usual commutator
  whilst for two fermionic operators this corresponds to the anti-commutator. -/
scoped[FieldSpecification.FieldOpFreeAlgebra] notation "[" œÜs "," œÜs' "]‚Çõca" => superCommuteF œÜs œÜs'

/-!

## The super commutor of different types of elements

-/

lemma superCommuteF_ofCrAnList_ofCrAnList (œÜs œÜs' : List ùìï.CrAnStates) :
    [ofCrAnList œÜs, ofCrAnList œÜs']‚Çõca =
    ofCrAnList (œÜs ++ œÜs') - ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofCrAnList (œÜs' ++ œÜs) := by
  rw [‚Üê ofListBasis_eq_ofList, ‚Üê ofListBasis_eq_ofList]
  simp only [superCommuteF, Basis.constr_basis]

lemma superCommuteF_ofCrAnState_ofCrAnState (œÜ œÜ' : ùìï.CrAnStates) :
    [ofCrAnState œÜ, ofCrAnState œÜ']‚Çõca =
    ofCrAnState œÜ * ofCrAnState œÜ' - ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ ofCrAnState œÜ' * ofCrAnState œÜ := by
  rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton]
  rw [superCommuteF_ofCrAnList_ofCrAnList, ofCrAnList_append]
  congr
  rw [ofCrAnList_append]
  rw [FieldStatistic.ofList_singleton, FieldStatistic.ofList_singleton, smul_mul_assoc]

lemma superCommuteF_ofCrAnList_ofStatesList (œÜcas : List ùìï.CrAnStates) (œÜs : List ùìï.States) :
    [ofCrAnList œÜcas, ofStateList œÜs]‚Çõca = ofCrAnList œÜcas * ofStateList œÜs -
    ùì¢(ùìï |>‚Çõ œÜcas, ùìï |>‚Çõ œÜs) ‚Ä¢ ofStateList œÜs * ofCrAnList œÜcas := by
  conv_lhs => rw [ofStateList_sum]
  rw [map_sum]
  conv_lhs =>
    enter [2, x]
    rw [superCommuteF_ofCrAnList_ofCrAnList, CrAnSection.statistics_eq_state_statistics,
      ofCrAnList_append, ofCrAnList_append]
  rw [Finset.sum_sub_distrib, ‚Üê Finset.mul_sum, ‚Üê Finset.smul_sum,
    ‚Üê Finset.sum_mul, ‚Üê ofStateList_sum]
  simp

lemma superCommuteF_ofStateList_ofStatesList (œÜ : List ùìï.States) (œÜs : List ùìï.States) :
    [ofStateList œÜ, ofStateList œÜs]‚Çõca = ofStateList œÜ * ofStateList œÜs -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs) ‚Ä¢ ofStateList œÜs * ofStateList œÜ := by
  conv_lhs => rw [ofStateList_sum]
  simp only [map_sum, LinearMap.coeFn_sum, Finset.sum_apply, instCommGroup.eq_1,
    Algebra.smul_mul_assoc]
  conv_lhs =>
    enter [2, x]
    rw [superCommuteF_ofCrAnList_ofStatesList]
  simp only [instCommGroup.eq_1, CrAnSection.statistics_eq_state_statistics,
    Algebra.smul_mul_assoc, Finset.sum_sub_distrib]
  rw [‚Üê Finset.sum_mul, ‚Üê Finset.smul_sum, ‚Üê Finset.mul_sum, ‚Üê ofStateList_sum]

lemma superCommuteF_ofState_ofStatesList (œÜ : ùìï.States) (œÜs : List ùìï.States) :
    [ofState œÜ, ofStateList œÜs]‚Çõca = ofState œÜ * ofStateList œÜs -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs) ‚Ä¢ ofStateList œÜs * ofState œÜ := by
  rw [‚Üê ofStateList_singleton, superCommuteF_ofStateList_ofStatesList, ofStateList_singleton]
  simp

lemma superCommuteF_ofStateList_ofState (œÜs : List ùìï.States) (œÜ : ùìï.States) :
    [ofStateList œÜs, ofState œÜ]‚Çõca = ofStateList œÜs * ofState œÜ -
    ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜ) ‚Ä¢ ofState œÜ * ofStateList œÜs := by
  rw [‚Üê ofStateList_singleton, superCommuteF_ofStateList_ofStatesList, ofStateList_singleton]
  simp

lemma superCommuteF_anPartF_crPartF (œÜ œÜ' : ùìï.States) :
    [anPartF œÜ, crPartF œÜ']‚Çõca = anPartF œÜ * crPartF œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ crPartF œÜ' * anPartF œÜ := by
  match œÜ, œÜ' with
  | States.inAsymp œÜ, _ =>
    simp
  | _, States.outAsymp œÜ =>
    simp only [crPartF_posAsymp, map_zero, mul_zero, instCommGroup.eq_1, smul_zero, zero_mul,
      sub_self]
  | States.position œÜ, States.position œÜ' =>
    simp only [anPartF_position, crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
    simp [crAnStatistics, ‚Üê ofCrAnList_append]
  | States.outAsymp œÜ, States.position œÜ' =>
    simp only [anPartF_posAsymp, crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
    simp [crAnStatistics, ‚Üê ofCrAnList_append]
  | States.position œÜ, States.inAsymp œÜ' =>
    simp only [anPartF_position, crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
    simp only [List.singleton_append, instCommGroup.eq_1, crAnStatistics,
      FieldStatistic.ofList_singleton, Function.comp_apply, crAnStatesToStates_prod, ‚Üê
      ofCrAnList_append]
  | States.outAsymp œÜ, States.inAsymp œÜ' =>
    simp only [anPartF_posAsymp, crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
    simp [crAnStatistics, ‚Üê ofCrAnList_append]

lemma superCommuteF_crPartF_anPartF (œÜ œÜ' : ùìï.States) :
    [crPartF œÜ, anPartF œÜ']‚Çõca = crPartF œÜ * anPartF œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ anPartF œÜ' * crPartF œÜ := by
    match œÜ, œÜ' with
    | States.outAsymp œÜ, _ =>
    simp only [crPartF_posAsymp, map_zero, LinearMap.zero_apply, zero_mul, instCommGroup.eq_1,
      mul_zero, sub_self]
    | _, States.inAsymp œÜ =>
    simp only [anPartF_negAsymp, map_zero, mul_zero, instCommGroup.eq_1, smul_zero, zero_mul,
      sub_self]
    | States.position œÜ, States.position œÜ' =>
    simp only [crPartF_position, anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
    simp [crAnStatistics, ‚Üê ofCrAnList_append]
    | States.position œÜ, States.outAsymp œÜ' =>
    simp only [crPartF_position, anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
    simp [crAnStatistics, ‚Üê ofCrAnList_append]
    | States.inAsymp œÜ, States.position œÜ' =>
    simp only [crPartF_negAsymp, anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
    simp [crAnStatistics, ‚Üê ofCrAnList_append]
    | States.inAsymp œÜ, States.outAsymp œÜ' =>
    simp only [crPartF_negAsymp, anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
    simp [crAnStatistics, ‚Üê ofCrAnList_append]

lemma superCommuteF_crPartF_crPartF (œÜ œÜ' : ùìï.States) :
    [crPartF œÜ, crPartF œÜ']‚Çõca = crPartF œÜ * crPartF œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ crPartF œÜ' * crPartF œÜ := by
  match œÜ, œÜ' with
  | States.outAsymp œÜ, _ =>
  simp only [crPartF_posAsymp, map_zero, LinearMap.zero_apply, zero_mul, instCommGroup.eq_1,
    mul_zero, sub_self]
  | _, States.outAsymp œÜ =>
  simp only [crPartF_posAsymp, map_zero, mul_zero, instCommGroup.eq_1, smul_zero, zero_mul,
    sub_self]
  | States.position œÜ, States.position œÜ' =>
  simp only [crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
  rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
  simp [crAnStatistics, ‚Üê ofCrAnList_append]
  | States.position œÜ, States.inAsymp œÜ' =>
  simp only [crPartF_position, crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
  rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
  simp [crAnStatistics, ‚Üê ofCrAnList_append]
  | States.inAsymp œÜ, States.position œÜ' =>
  simp only [crPartF_negAsymp, crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
  rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
  simp [crAnStatistics, ‚Üê ofCrAnList_append]
  | States.inAsymp œÜ, States.inAsymp œÜ' =>
  simp only [crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
  rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
  simp [crAnStatistics, ‚Üê ofCrAnList_append]

lemma superCommuteF_anPartF_anPartF (œÜ œÜ' : ùìï.States) :
    [anPartF œÜ, anPartF œÜ']‚Çõca =
    anPartF œÜ * anPartF œÜ' - ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ anPartF œÜ' * anPartF œÜ := by
  match œÜ, œÜ' with
  | States.inAsymp œÜ, _ =>
    simp
  | _, States.inAsymp œÜ =>
    simp
  | States.position œÜ, States.position œÜ' =>
    simp only [anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
    simp [crAnStatistics, ‚Üê ofCrAnList_append]
  | States.position œÜ, States.outAsymp œÜ' =>
    simp only [anPartF_position, anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
    simp [crAnStatistics, ‚Üê ofCrAnList_append]
  | States.outAsymp œÜ, States.position œÜ' =>
    simp only [anPartF_posAsymp, anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
    simp [crAnStatistics, ‚Üê ofCrAnList_append]
  | States.outAsymp œÜ, States.outAsymp œÜ' =>
    simp only [anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList]
    simp [crAnStatistics, ‚Üê ofCrAnList_append]

lemma superCommuteF_crPartF_ofStateList (œÜ : ùìï.States) (œÜs : List ùìï.States) :
    [crPartF œÜ, ofStateList œÜs]‚Çõca =
    crPartF œÜ * ofStateList œÜs - ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs) ‚Ä¢ ofStateList œÜs *
    crPartF œÜ := by
  match œÜ with
  | States.inAsymp œÜ =>
    simp only [crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofStatesList]
    simp [crAnStatistics]
  | States.position œÜ =>
    simp only [crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofStatesList]
    simp [crAnStatistics]
  | States.outAsymp œÜ =>
    simp

lemma superCommuteF_anPartF_ofStateList (œÜ : ùìï.States) (œÜs : List ùìï.States) :
    [anPartF œÜ, ofStateList œÜs]‚Çõca =
    anPartF œÜ * ofStateList œÜs - ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs) ‚Ä¢
    ofStateList œÜs * anPartF œÜ := by
  match œÜ with
  | States.inAsymp œÜ =>
    simp
  | States.position œÜ =>
    simp only [anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofStatesList]
    simp [crAnStatistics]
  | States.outAsymp œÜ =>
    simp only [anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofStatesList]
    simp [crAnStatistics]

lemma superCommuteF_crPartF_ofState (œÜ œÜ' : ùìï.States) :
    [crPartF œÜ, ofState œÜ']‚Çõca =
    crPartF œÜ * ofState œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ ofState œÜ' * crPartF œÜ := by
  rw [‚Üê ofStateList_singleton, superCommuteF_crPartF_ofStateList]
  simp

lemma superCommuteF_anPartF_ofState (œÜ œÜ' : ùìï.States) :
    [anPartF œÜ, ofState œÜ']‚Çõca =
    anPartF œÜ * ofState œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ ofState œÜ' * anPartF œÜ := by
  rw [‚Üê ofStateList_singleton, superCommuteF_anPartF_ofStateList]
  simp

/-!

## Mul equal superCommuteF

Lemmas which rewrite a multiplication of two elements of the algebra as their commuted
multiplication with a sign plus the super commutor.

-/
lemma ofCrAnList_mul_ofCrAnList_eq_superCommuteF (œÜs œÜs' : List ùìï.CrAnStates) :
    ofCrAnList œÜs * ofCrAnList œÜs' = ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofCrAnList œÜs' * ofCrAnList œÜs
    + [ofCrAnList œÜs, ofCrAnList œÜs']‚Çõca := by
  rw [superCommuteF_ofCrAnList_ofCrAnList]
  simp [ofCrAnList_append]

lemma ofCrAnState_mul_ofCrAnList_eq_superCommuteF (œÜ : ùìï.CrAnStates) (œÜs' : List ùìï.CrAnStates) :
    ofCrAnState œÜ * ofCrAnList œÜs' = ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs') ‚Ä¢ ofCrAnList œÜs' * ofCrAnState œÜ
    + [ofCrAnState œÜ, ofCrAnList œÜs']‚Çõca := by
  rw [‚Üê ofCrAnList_singleton, ofCrAnList_mul_ofCrAnList_eq_superCommuteF]
  simp

lemma ofStateList_mul_ofStateList_eq_superCommuteF (œÜs œÜs' : List ùìï.States) :
    ofStateList œÜs * ofStateList œÜs' = ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofStateList œÜs' * ofStateList œÜs
    + [ofStateList œÜs, ofStateList œÜs']‚Çõca := by
  rw [superCommuteF_ofStateList_ofStatesList]
  simp

lemma ofState_mul_ofStateList_eq_superCommuteF (œÜ : ùìï.States) (œÜs' : List ùìï.States) :
    ofState œÜ * ofStateList œÜs' = ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs') ‚Ä¢ ofStateList œÜs' * ofState œÜ
    + [ofState œÜ, ofStateList œÜs']‚Çõca := by
  rw [superCommuteF_ofState_ofStatesList]
  simp

lemma ofStateList_mul_ofState_eq_superCommuteF (œÜs : List ùìï.States) (œÜ : ùìï.States) :
    ofStateList œÜs * ofState œÜ = ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜ) ‚Ä¢ ofState œÜ * ofStateList œÜs
    + [ofStateList œÜs, ofState œÜ]‚Çõca := by
  rw [superCommuteF_ofStateList_ofState]
  simp

lemma crPartF_mul_anPartF_eq_superCommuteF (œÜ œÜ' : ùìï.States) :
    crPartF œÜ * anPartF œÜ' =
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ anPartF œÜ' * crPartF œÜ +
    [crPartF œÜ, anPartF œÜ']‚Çõca := by
  rw [superCommuteF_crPartF_anPartF]
  simp

lemma anPartF_mul_crPartF_eq_superCommuteF (œÜ œÜ' : ùìï.States) :
    anPartF œÜ * crPartF œÜ' =
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢
    crPartF œÜ' * anPartF œÜ +
    [anPartF œÜ, crPartF œÜ']‚Çõca := by
  rw [superCommuteF_anPartF_crPartF]
  simp

lemma crPartF_mul_crPartF_eq_superCommuteF (œÜ œÜ' : ùìï.States) :
    crPartF œÜ * crPartF œÜ' =
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ crPartF œÜ' * crPartF œÜ +
    [crPartF œÜ, crPartF œÜ']‚Çõca := by
  rw [superCommuteF_crPartF_crPartF]
  simp

lemma anPartF_mul_anPartF_eq_superCommuteF (œÜ œÜ' : ùìï.States) :
    anPartF œÜ * anPartF œÜ' = ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ anPartF œÜ' * anPartF œÜ +
    [anPartF œÜ, anPartF œÜ']‚Çõca := by
  rw [superCommuteF_anPartF_anPartF]
  simp

lemma ofCrAnList_mul_ofStateList_eq_superCommuteF (œÜs : List ùìï.CrAnStates) (œÜs' : List ùìï.States) :
    ofCrAnList œÜs * ofStateList œÜs' = ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofStateList œÜs' * ofCrAnList œÜs
    + [ofCrAnList œÜs, ofStateList œÜs']‚Çõca := by
  rw [superCommuteF_ofCrAnList_ofStatesList]
  simp

/-!

## Symmetry of the super commutor.

-/

lemma superCommuteF_ofCrAnList_ofCrAnList_symm (œÜs œÜs' : List ùìï.CrAnStates) :
    [ofCrAnList œÜs, ofCrAnList œÜs']‚Çõca =
    (- ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs')) ‚Ä¢ [ofCrAnList œÜs', ofCrAnList œÜs]‚Çõca := by
  rw [superCommuteF_ofCrAnList_ofCrAnList, superCommuteF_ofCrAnList_ofCrAnList, smul_sub]
  simp only [instCommGroup.eq_1, neg_smul, sub_neg_eq_add]
  rw [smul_smul]
  conv_rhs =>
    rhs
    rw [exchangeSign_symm, exchangeSign_mul_self]
  simp only [one_smul]
  abel

lemma superCommuteF_ofCrAnState_ofCrAnState_symm (œÜ œÜ' : ùìï.CrAnStates) :
    [ofCrAnState œÜ, ofCrAnState œÜ']‚Çõca =
    (- ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ')) ‚Ä¢ [ofCrAnState œÜ', ofCrAnState œÜ]‚Çõca := by
  rw [superCommuteF_ofCrAnState_ofCrAnState, superCommuteF_ofCrAnState_ofCrAnState]
  rw [smul_sub]
  simp only [instCommGroup.eq_1, Algebra.smul_mul_assoc, neg_smul, sub_neg_eq_add]
  rw [smul_smul]
  conv_rhs =>
    rhs
    rw [exchangeSign_symm, exchangeSign_mul_self]
  simp only [one_smul]
  abel

/-!

## Splitting the super commutor on lists into sums.

-/

lemma superCommuteF_ofCrAnList_ofCrAnList_cons (œÜ : ùìï.CrAnStates) (œÜs œÜs' : List ùìï.CrAnStates) :
    [ofCrAnList œÜs, ofCrAnList (œÜ :: œÜs')]‚Çõca =
    [ofCrAnList œÜs, ofCrAnState œÜ]‚Çõca * ofCrAnList œÜs' +
    ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜ)
    ‚Ä¢ ofCrAnState œÜ * [ofCrAnList œÜs, ofCrAnList œÜs']‚Çõca := by
  rw [superCommuteF_ofCrAnList_ofCrAnList]
  conv_rhs =>
    lhs
    rw [‚Üê ofCrAnList_singleton, superCommuteF_ofCrAnList_ofCrAnList, sub_mul, ‚Üê ofCrAnList_append]
    rhs
    rw [FieldStatistic.ofList_singleton, ofCrAnList_append, ofCrAnList_singleton, smul_mul_assoc,
      mul_assoc, ‚Üê ofCrAnList_append]
  conv_rhs =>
    rhs
    rw [superCommuteF_ofCrAnList_ofCrAnList, mul_sub, smul_mul_assoc]
  simp only [instCommGroup.eq_1, List.cons_append, List.append_assoc, List.nil_append,
    Algebra.mul_smul_comm, Algebra.smul_mul_assoc, sub_add_sub_cancel, sub_right_inj]
  rw [‚Üê ofCrAnList_cons, smul_smul, FieldStatistic.ofList_cons_eq_mul]
  simp only [instCommGroup, map_mul, mul_comm]

lemma superCommuteF_ofCrAnList_ofStateList_cons (œÜ : ùìï.States) (œÜs : List ùìï.CrAnStates)
    (œÜs' : List ùìï.States) : [ofCrAnList œÜs, ofStateList (œÜ :: œÜs')]‚Çõca =
    [ofCrAnList œÜs, ofState œÜ]‚Çõca * ofStateList œÜs' +
    ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜ) ‚Ä¢ ofState œÜ * [ofCrAnList œÜs, ofStateList œÜs']‚Çõca := by
  rw [superCommuteF_ofCrAnList_ofStatesList]
  conv_rhs =>
    lhs
    rw [‚Üê ofStateList_singleton, superCommuteF_ofCrAnList_ofStatesList, sub_mul, mul_assoc,
      ‚Üê ofStateList_append]
    rhs
    rw [FieldStatistic.ofList_singleton, ofStateList_singleton, smul_mul_assoc,
      smul_mul_assoc, mul_assoc]
  conv_rhs =>
    rhs
    rw [superCommuteF_ofCrAnList_ofStatesList, mul_sub, smul_mul_assoc]
  simp only [instCommGroup, Algebra.smul_mul_assoc, List.singleton_append, Algebra.mul_smul_comm,
    sub_add_sub_cancel, sub_right_inj]
  rw [ofStateList_cons, mul_assoc, smul_smul, FieldStatistic.ofList_cons_eq_mul]
  simp [mul_comm]

/--
Within the creation and annihilation algebra, we have that
`[œÜ·∂ú·µÉs, œÜ·∂ú·µÉ‚ÇÄ ‚Ä¶ œÜ·∂ú·µÉ‚Çô]‚Çõca = ‚àë i, s·µ¢ ‚Ä¢ œÜ·∂ú·µÉs‚ÇÄ ‚Ä¶ œÜ·∂ú·µÉ·µ¢‚Çã‚ÇÅ * [œÜ·∂ú·µÉs, œÜ·∂ú·µÉ·µ¢]‚Çõca * œÜ·∂ú·µÉ·µ¢‚Çä‚ÇÅ ‚Ä¶ œÜ·∂ú·µÉ‚Çô`
where `s·µ¢` is the exchange sign for `œÜ·∂ú·µÉs` and `œÜ·∂ú·µÉs‚ÇÄ ‚Ä¶ œÜ·∂ú·µÉ·µ¢‚Çã‚ÇÅ`.
-/
lemma superCommuteF_ofCrAnList_ofCrAnList_eq_sum (œÜs : List ùìï.CrAnStates) :
    (œÜs' : List ùìï.CrAnStates) ‚Üí [ofCrAnList œÜs, ofCrAnList œÜs']‚Çõca =
    ‚àë (n : Fin œÜs'.length), ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs'.take n) ‚Ä¢
    ofCrAnList (œÜs'.take n) * [ofCrAnList œÜs, ofCrAnState (œÜs'.get n)]‚Çõca *
    ofCrAnList (œÜs'.drop (n + 1))
  | [] => by
    simp [‚Üê ofCrAnList_nil, superCommuteF_ofCrAnList_ofCrAnList]
  | œÜ :: œÜs' => by
    rw [superCommuteF_ofCrAnList_ofCrAnList_cons, superCommuteF_ofCrAnList_ofCrAnList_eq_sum œÜs œÜs']
    conv_rhs => erw [Fin.sum_univ_succ]
    congr 1
    ¬∑ simp
    ¬∑ simp [Finset.mul_sum, smul_smul, ofCrAnList_cons, mul_assoc,
        FieldStatistic.ofList_cons_eq_mul, mul_comm]

lemma superCommuteF_ofCrAnList_ofStateList_eq_sum (œÜs : List ùìï.CrAnStates) : (œÜs' : List ùìï.States) ‚Üí
    [ofCrAnList œÜs, ofStateList œÜs']‚Çõca =
    ‚àë (n : Fin œÜs'.length), ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs'.take n) ‚Ä¢
      ofStateList (œÜs'.take n) * [ofCrAnList œÜs, ofState (œÜs'.get n)]‚Çõca *
      ofStateList (œÜs'.drop (n + 1))
  | [] => by
    simp only [superCommuteF_ofCrAnList_ofStatesList, instCommGroup, ofList_empty,
      exchangeSign_bosonic, one_smul, List.length_nil, Finset.univ_eq_empty, List.take_nil,
      List.get_eq_getElem, List.drop_nil, Finset.sum_empty]
    simp
  | œÜ :: œÜs' => by
    rw [superCommuteF_ofCrAnList_ofStateList_cons,
      superCommuteF_ofCrAnList_ofStateList_eq_sum œÜs œÜs']
    conv_rhs => erw [Fin.sum_univ_succ]
    congr 1
    ¬∑ simp
    ¬∑ simp [Finset.mul_sum, smul_smul, ofStateList_cons, mul_assoc,
        FieldStatistic.ofList_cons_eq_mul, mul_comm]

lemma summerCommute_jacobi_ofCrAnList (œÜs1 œÜs2 œÜs3 : List ùìï.CrAnStates) :
    [ofCrAnList œÜs1, [ofCrAnList œÜs2, ofCrAnList œÜs3]‚Çõca]‚Çõca =
    ùì¢(ùìï |>‚Çõ œÜs1, ùìï |>‚Çõ œÜs3) ‚Ä¢
    (- ùì¢(ùìï |>‚Çõ œÜs2, ùìï |>‚Çõ œÜs3) ‚Ä¢ [ofCrAnList œÜs3, [ofCrAnList œÜs1, ofCrAnList œÜs2]‚Çõca]‚Çõca -
    ùì¢(ùìï |>‚Çõ œÜs1, ùìï |>‚Çõ œÜs2) ‚Ä¢ [ofCrAnList œÜs2, [ofCrAnList œÜs3, ofCrAnList œÜs1]‚Çõca]‚Çõca) := by
  repeat rw [superCommuteF_ofCrAnList_ofCrAnList]
  simp only [instCommGroup, map_sub, map_smul, neg_smul]
  repeat rw [superCommuteF_ofCrAnList_ofCrAnList]
  simp only [instCommGroup.eq_1, ofList_append_eq_mul, List.append_assoc]
  by_cases h1 : (ùìï |>‚Çõ œÜs1) = bosonic <;>
    by_cases h2 : (ùìï |>‚Çõ œÜs2) = bosonic <;>
    by_cases h3 : (ùìï |>‚Çõ œÜs3) = bosonic
  ¬∑ simp only [h1, h2, h3, mul_self, bosonic_exchangeSign, one_smul, exchangeSign_bosonic, neg_sub]
    abel
  ¬∑ simp only [h1, h2, bosonic_exchangeSign, one_smul, mul_bosonic, mul_self, map_one,
    exchangeSign_bosonic, neg_sub]
    abel
  ¬∑ simp only [h1, h3, mul_bosonic, bosonic_exchangeSign, one_smul, exchangeSign_bosonic, neg_sub,
    mul_self, map_one]
    abel
  ¬∑ simp only [neq_bosonic_iff_eq_fermionic] at h1 h2 h3
    simp only [h1, h2, h3, mul_self, bosonic_exchangeSign, one_smul,
      fermionic_exchangeSign_fermionic, neg_smul, neg_sub, bosonic_mul_fermionic, sub_neg_eq_add,
      mul_bosonic, smul_add, exchangeSign_bosonic]
    abel
  ¬∑ simp only [neq_bosonic_iff_eq_fermionic] at h1 h2 h3
    simp only [h1, h2, h3, mul_self, map_one, one_smul, exchangeSign_bosonic, mul_bosonic,
      bosonic_exchangeSign, bosonic_mul_fermionic, neg_sub]
    abel
  ¬∑ simp only [neq_bosonic_iff_eq_fermionic] at h1 h2 h3
    simp only [h1, h2, h3, bosonic_mul_fermionic, fermionic_exchangeSign_fermionic, neg_smul,
      one_smul, sub_neg_eq_add, bosonic_exchangeSign, mul_bosonic, smul_add, exchangeSign_bosonic,
      neg_sub, mul_self]
    abel
  ¬∑ simp only [neq_bosonic_iff_eq_fermionic] at h1 h2 h3
    simp only [h1, h2, h3, mul_bosonic, fermionic_exchangeSign_fermionic, neg_smul, one_smul,
      sub_neg_eq_add, exchangeSign_bosonic, bosonic_mul_fermionic, smul_add, mul_self,
      bosonic_exchangeSign, neg_sub]
    abel
  ¬∑ simp only [neq_bosonic_iff_eq_fermionic] at h1 h2 h3
    simp only [h1, h2, h3, mul_self, map_one, one_smul, fermionic_exchangeSign_fermionic, neg_smul,
      neg_sub]
    abel

/-!

## Interaction with grading.

-/

lemma superCommuteF_grade {a b : ùìï.FieldOpFreeAlgebra} {f1 f2 : FieldStatistic}
    (ha : a ‚àà statisticSubmodule f1) (hb : b ‚àà statisticSubmodule f2) :
    [a, b]‚Çõca ‚àà statisticSubmodule (f1 + f2) := by
  let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule f2) : Prop :=
    [a, a2]‚Çõca ‚àà statisticSubmodule (f1 + f2)
  change p b hb
  apply Submodule.span_induction (p := p)
  ¬∑ intro x hx
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := hx
    simp only [add_eq_mul, instCommGroup, p]
    let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule f1) : Prop :=
        [a2, ofCrAnList œÜs]‚Çõca ‚àà statisticSubmodule (f1 + f2)
    change p a ha
    apply Submodule.span_induction (p := p)
    ¬∑ intro x hx
      obtain ‚ü®œÜs', rfl, hœÜs'‚ü© := hx
      simp only [add_eq_mul, instCommGroup, p]
      rw [superCommuteF_ofCrAnList_ofCrAnList]
      apply Submodule.sub_mem _
      ¬∑ apply ofCrAnList_mem_statisticSubmodule_of
        rw [ofList_append_eq_mul, hœÜs, hœÜs']
      ¬∑ apply Submodule.smul_mem
        apply ofCrAnList_mem_statisticSubmodule_of
        rw [ofList_append_eq_mul, hœÜs, hœÜs']
        rw [mul_comm]
    ¬∑ simp [p]
    ¬∑ intro x y hx hy hp1 hp2
      simp only [add_eq_mul, instCommGroup, map_add, LinearMap.add_apply, p]
      exact Submodule.add_mem _ hp1 hp2
    ¬∑ intro c x hx hp1
      simp only [add_eq_mul, instCommGroup, map_smul, LinearMap.smul_apply, p]
      exact Submodule.smul_mem _ c hp1
    ¬∑ exact ha
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hp1 hp2
    simp only [add_eq_mul, instCommGroup, map_add, p]
    exact Submodule.add_mem _ hp1 hp2
  ¬∑ intro c x hx hp1
    simp only [add_eq_mul, instCommGroup, map_smul, p]
    exact Submodule.smul_mem _ c hp1
  ¬∑ exact hb

lemma superCommuteF_bosonic_bosonic {a b : ùìï.FieldOpFreeAlgebra}
    (ha : a ‚àà statisticSubmodule bosonic) (hb : b ‚àà statisticSubmodule bosonic) :
    [a, b]‚Çõca = a * b - b * a := by
  let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule bosonic) : Prop :=
    [a, a2]‚Çõca = a * a2 - a2 * a
  change p b hb
  apply Submodule.span_induction (p := p)
  ¬∑ intro x hx
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := hx
    let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule bosonic) : Prop :=
        [a2, ofCrAnList œÜs]‚Çõca = a2 * ofCrAnList œÜs - ofCrAnList œÜs * a2
    change p a ha
    apply Submodule.span_induction (p := p)
    ¬∑ intro x hx
      obtain ‚ü®œÜs', rfl, hœÜs'‚ü© := hx
      simp only [p]
      rw [superCommuteF_ofCrAnList_ofCrAnList]
      simp [hœÜs, ofCrAnList_append]
    ¬∑ simp [p]
    ¬∑ intro x y hx hy hp1 hp2
      simp_all only [p, map_add, LinearMap.add_apply, add_mul, mul_add]
      abel
    ¬∑ intro c x hx hp1
      simp_all [p, smul_sub]
    ¬∑ exact ha
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hp1 hp2
    simp_all only [p, map_add, mul_add, add_mul]
    abel
  ¬∑ intro c x hx hp1
    simp_all [p, smul_sub]
  ¬∑ exact hb

lemma superCommuteF_bosonic_fermionic {a b : ùìï.FieldOpFreeAlgebra}
    (ha : a ‚àà statisticSubmodule bosonic) (hb : b ‚àà statisticSubmodule fermionic) :
    [a, b]‚Çõca = a * b - b * a := by
  let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule fermionic) : Prop :=
    [a, a2]‚Çõca = a * a2 - a2 * a
  change p b hb
  apply Submodule.span_induction (p := p)
  ¬∑ intro x hx
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := hx
    let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule bosonic) : Prop :=
        [a2, ofCrAnList œÜs]‚Çõca = a2 * ofCrAnList œÜs - ofCrAnList œÜs * a2
    change p a ha
    apply Submodule.span_induction (p := p)
    ¬∑ intro x hx
      obtain ‚ü®œÜs', rfl, hœÜs'‚ü© := hx
      simp only [p]
      rw [superCommuteF_ofCrAnList_ofCrAnList]
      simp [hœÜs, hœÜs', ofCrAnList_append]
    ¬∑ simp [p]
    ¬∑ intro x y hx hy hp1 hp2
      simp_all only [p, map_add, LinearMap.add_apply, add_mul, mul_add]
      abel
    ¬∑ intro c x hx hp1
      simp_all [p, smul_sub]
    ¬∑ exact ha
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hp1 hp2
    simp_all only [p, map_add, mul_add, add_mul]
    abel
  ¬∑ intro c x hx hp1
    simp_all [p, smul_sub]
  ¬∑ exact hb

lemma superCommuteF_fermionic_bonsonic {a b : ùìï.FieldOpFreeAlgebra}
    (ha : a ‚àà statisticSubmodule fermionic) (hb : b ‚àà statisticSubmodule bosonic) :
    [a, b]‚Çõca = a * b - b * a := by
  let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule bosonic) : Prop :=
    [a, a2]‚Çõca = a * a2 - a2 * a
  change p b hb
  apply Submodule.span_induction (p := p)
  ¬∑ intro x hx
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := hx
    let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule fermionic) : Prop :=
        [a2, ofCrAnList œÜs]‚Çõca = a2 * ofCrAnList œÜs - ofCrAnList œÜs * a2
    change p a ha
    apply Submodule.span_induction (p := p)
    ¬∑ intro x hx
      obtain ‚ü®œÜs', rfl, hœÜs'‚ü© := hx
      simp only [p]
      rw [superCommuteF_ofCrAnList_ofCrAnList]
      simp [hœÜs, hœÜs', ofCrAnList_append]
    ¬∑ simp [p]
    ¬∑ intro x y hx hy hp1 hp2
      simp_all only [p, map_add, LinearMap.add_apply, add_mul, mul_add]
      abel
    ¬∑ intro c x hx hp1
      simp_all [p, smul_sub]
    ¬∑ exact ha
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hp1 hp2
    simp_all only [map_add, mul_add, add_mul, p]
    abel
  ¬∑ intro c x hx hp1
    simp_all [p, smul_sub]
  ¬∑ exact hb

lemma superCommuteF_bonsonic {a b : ùìï.FieldOpFreeAlgebra} (hb : b ‚àà statisticSubmodule bosonic) :
    [a, b]‚Çõca = a * b - b * a := by
  rw [‚Üê bosonicProj_add_fermionicProj a]
  simp only [map_add, LinearMap.add_apply]
  rw [superCommuteF_bosonic_bosonic (by simp) hb, superCommuteF_fermionic_bonsonic (by simp) hb]
  simp only [add_mul, mul_add]
  abel

lemma bosonic_superCommuteF {a b : ùìï.FieldOpFreeAlgebra} (ha : a ‚àà statisticSubmodule bosonic) :
    [a, b]‚Çõca = a * b - b * a := by
  rw [‚Üê bosonicProj_add_fermionicProj b]
  simp only [map_add, LinearMap.add_apply]
  rw [superCommuteF_bosonic_bosonic ha (by simp), superCommuteF_bosonic_fermionic ha (by simp)]
  simp only [add_mul, mul_add]
  abel

lemma superCommuteF_bonsonic_symm {a b : ùìï.FieldOpFreeAlgebra} (hb : b ‚àà statisticSubmodule bosonic) :
    [a, b]‚Çõca = - [b, a]‚Çõca := by
  rw [bosonic_superCommuteF hb, superCommuteF_bonsonic hb]
  simp

lemma bonsonic_superCommuteF_symm {a b : ùìï.FieldOpFreeAlgebra} (ha : a ‚àà statisticSubmodule bosonic) :
    [a, b]‚Çõca = - [b, a]‚Çõca := by
  rw [bosonic_superCommuteF ha, superCommuteF_bonsonic ha]
  simp

lemma superCommuteF_fermionic_fermionic {a b : ùìï.FieldOpFreeAlgebra}
    (ha : a ‚àà statisticSubmodule fermionic) (hb : b ‚àà statisticSubmodule fermionic) :
    [a, b]‚Çõca = a * b + b * a := by
  let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule fermionic) : Prop :=
    [a, a2]‚Çõca = a * a2 + a2 * a
  change p b hb
  apply Submodule.span_induction (p := p)
  ¬∑ intro x hx
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := hx
    let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule fermionic) : Prop :=
        [a2, ofCrAnList œÜs]‚Çõca = a2 * ofCrAnList œÜs + ofCrAnList œÜs * a2
    change p a ha
    apply Submodule.span_induction (p := p)
    ¬∑ intro x hx
      obtain ‚ü®œÜs', rfl, hœÜs'‚ü© := hx
      simp only [p]
      rw [superCommuteF_ofCrAnList_ofCrAnList]
      simp [hœÜs, hœÜs', ofCrAnList_append]
    ¬∑ simp [p]
    ¬∑ intro x y hx hy hp1 hp2
      simp_all only [p, map_add, LinearMap.add_apply, add_mul, mul_add]
      abel
    ¬∑ intro c x hx hp1
      simp_all [p, smul_sub]
    ¬∑ exact ha
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hp1 hp2
    simp_all only [map_add, mul_add, add_mul, p]
    abel
  ¬∑ intro c x hx hp1
    simp_all [p, smul_sub]
  ¬∑ exact hb

lemma superCommuteF_fermionic_fermionic_symm {a b : ùìï.FieldOpFreeAlgebra}
    (ha : a ‚àà statisticSubmodule fermionic) (hb : b ‚àà statisticSubmodule fermionic) :
    [a, b]‚Çõca = [b, a]‚Çõca := by
  rw [superCommuteF_fermionic_fermionic ha hb]
  rw [superCommuteF_fermionic_fermionic hb ha]
  abel

lemma superCommuteF_expand_bosonicProj_fermionicProj (a b : ùìï.FieldOpFreeAlgebra) :
    [a, b]‚Çõca = bosonicProj a * bosonicProj b - bosonicProj b * bosonicProj a +
    bosonicProj a * fermionicProj b - fermionicProj b * bosonicProj a +
    fermionicProj a * bosonicProj b - bosonicProj b * fermionicProj a +
    fermionicProj a * fermionicProj b + fermionicProj b * fermionicProj a := by
  conv_lhs => rw [‚Üê bosonicProj_add_fermionicProj a, ‚Üê bosonicProj_add_fermionicProj b]
  simp only [map_add, LinearMap.add_apply]
  rw [superCommuteF_bonsonic (by simp),
      superCommuteF_fermionic_bonsonic (by simp) (by simp),
      superCommuteF_bosonic_fermionic (by simp) (by simp),
      superCommuteF_fermionic_fermionic (by simp) (by simp)]
  abel

lemma superCommuteF_ofCrAnList_ofCrAnList_bosonic_or_fermionic (œÜs œÜs' : List ùìï.CrAnStates) :
    [ofCrAnList œÜs, ofCrAnList œÜs']‚Çõca ‚àà statisticSubmodule bosonic ‚à®
    [ofCrAnList œÜs, ofCrAnList œÜs']‚Çõca ‚àà statisticSubmodule fermionic := by
  by_cases h1 : (ùìï |>‚Çõ œÜs) = bosonic <;> by_cases h2 : (ùìï |>‚Çõ œÜs') = bosonic
  ¬∑ left
    have h : bosonic = bosonic + bosonic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade
    apply ofCrAnList_mem_statisticSubmodule_of _ _ h1
    apply ofCrAnList_mem_statisticSubmodule_of _ _ h2
  ¬∑ right
    have h : fermionic = bosonic + fermionic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade
    apply ofCrAnList_mem_statisticSubmodule_of _ _ h1
    apply ofCrAnList_mem_statisticSubmodule_of _ _ (by simpa using h2)
  ¬∑ right
    have h : fermionic = fermionic + bosonic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade
    apply ofCrAnList_mem_statisticSubmodule_of _ _ (by simpa using h1)
    apply ofCrAnList_mem_statisticSubmodule_of _ _ h2
  ¬∑ left
    have h : bosonic = fermionic + fermionic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade
    apply ofCrAnList_mem_statisticSubmodule_of _ _ (by simpa using h1)
    apply ofCrAnList_mem_statisticSubmodule_of _ _ (by simpa using h2)

lemma superCommuteF_ofCrAnState_ofCrAnState_bosonic_or_fermionic (œÜ œÜ' : ùìï.CrAnStates) :
    [ofCrAnState œÜ, ofCrAnState œÜ']‚Çõca ‚àà statisticSubmodule bosonic ‚à®
    [ofCrAnState œÜ, ofCrAnState œÜ']‚Çõca ‚àà statisticSubmodule fermionic := by
  rw [‚Üê ofCrAnList_singleton, ‚Üê ofCrAnList_singleton]
  exact superCommuteF_ofCrAnList_ofCrAnList_bosonic_or_fermionic [œÜ] [œÜ']

lemma superCommuteF_superCommuteF_ofCrAnState_bosonic_or_fermionic (œÜ1 œÜ2 œÜ3 : ùìï.CrAnStates) :
    [ofCrAnState œÜ1, [ofCrAnState œÜ2, ofCrAnState œÜ3]‚Çõca]‚Çõca ‚àà statisticSubmodule bosonic ‚à®
    [ofCrAnState œÜ1, [ofCrAnState œÜ2, ofCrAnState œÜ3]‚Çõca]‚Çõca ‚àà statisticSubmodule fermionic := by
  rcases superCommuteF_ofCrAnState_ofCrAnState_bosonic_or_fermionic œÜ2 œÜ3 with hs | hs
    <;> rcases ofCrAnState_bosonic_or_fermionic œÜ1 with h1 | h1
  ¬∑ left
    have h : bosonic = bosonic + bosonic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade h1 hs
  ¬∑ right
    have h : fermionic = fermionic + bosonic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade h1 hs
  ¬∑ right
    have h : fermionic = bosonic + fermionic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade h1 hs
  ¬∑ left
    have h : bosonic = fermionic + fermionic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade h1 hs

lemma superCommuteF_bosonic_ofCrAnList_eq_sum (a : ùìï.FieldOpFreeAlgebra) (œÜs : List ùìï.CrAnStates)
    (ha : a ‚àà statisticSubmodule bosonic) :
    [a, ofCrAnList œÜs]‚Çõca = ‚àë (n : Fin œÜs.length),
      ofCrAnList (œÜs.take n) * [a, ofCrAnState (œÜs.get n)]‚Çõca *
      ofCrAnList (œÜs.drop (n + 1)) := by
  let p (a : ùìï.FieldOpFreeAlgebra) (ha : a ‚àà statisticSubmodule bosonic) : Prop :=
      [a, ofCrAnList œÜs]‚Çõca = ‚àë (n : Fin œÜs.length),
      ofCrAnList (œÜs.take n) * [a, ofCrAnState (œÜs.get n)]‚Çõca *
      ofCrAnList (œÜs.drop (n + 1))
  change p a ha
  apply Submodule.span_induction (p := p)
  ¬∑ intro a ha
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := ha
    simp only [List.get_eq_getElem, p]
    rw [superCommuteF_ofCrAnList_ofCrAnList_eq_sum]
    congr
    funext n
    simp [hœÜs]
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hpx hpy
    simp_all only [List.get_eq_getElem, map_add, LinearMap.add_apply, p]
    rw [‚Üê Finset.sum_add_distrib]
    congr
    funext n
    simp [mul_add, add_mul]
  ¬∑ intro c x hx hpx
    simp_all [p, Finset.smul_sum]
  ¬∑ exact ha

lemma superCommuteF_fermionic_ofCrAnList_eq_sum (a : ùìï.FieldOpFreeAlgebra) (œÜs : List ùìï.CrAnStates)
    (ha : a ‚àà statisticSubmodule fermionic) :
    [a, ofCrAnList œÜs]‚Çõca = ‚àë (n : Fin œÜs.length), ùì¢(fermionic, ùìï |>‚Çõ œÜs.take n) ‚Ä¢
      ofCrAnList (œÜs.take n) * [a, ofCrAnState (œÜs.get n)]‚Çõca *
      ofCrAnList (œÜs.drop (n + 1)) := by
  let p (a : ùìï.FieldOpFreeAlgebra) (ha : a ‚àà statisticSubmodule fermionic) : Prop :=
      [a, ofCrAnList œÜs]‚Çõca = ‚àë (n : Fin œÜs.length), ùì¢(fermionic, ùìï |>‚Çõ œÜs.take n) ‚Ä¢
      ofCrAnList (œÜs.take n) * [a, ofCrAnState (œÜs.get n)]‚Çõca *
      ofCrAnList (œÜs.drop (n + 1))
  change p a ha
  apply Submodule.span_induction (p := p)
  ¬∑ intro a ha
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := ha
    simp only [instCommGroup, List.get_eq_getElem, Algebra.smul_mul_assoc, p]
    rw [superCommuteF_ofCrAnList_ofCrAnList_eq_sum]
    congr
    funext n
    simp [hœÜs]
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hpx hpy
    simp_all only [p, instCommGroup, List.get_eq_getElem, Algebra.smul_mul_assoc, map_add,
      LinearMap.add_apply]
    rw [‚Üê Finset.sum_add_distrib]
    congr
    funext n
    simp [mul_add, add_mul]
  ¬∑ intro c x hx hpx
    simp_all only [p, instCommGroup, List.get_eq_getElem, Algebra.smul_mul_assoc, map_smul,
      LinearMap.smul_apply, Finset.smul_sum, Algebra.mul_smul_comm]
    congr
    funext x
    simp [smul_smul, mul_comm]
  ¬∑ exact ha

lemma statistic_neq_of_superCommuteF_fermionic {œÜs œÜs' : List ùìï.CrAnStates}
    (h : [ofCrAnList œÜs, ofCrAnList œÜs']‚Çõca ‚àà statisticSubmodule fermionic) :
    (ùìï |>‚Çõ œÜs) ‚â† (ùìï |>‚Çõ œÜs') ‚à® [ofCrAnList œÜs, ofCrAnList œÜs']‚Çõca = 0 := by
  by_cases h0 : [ofCrAnList œÜs, ofCrAnList œÜs']‚Çõca = 0
  ¬∑ simp [h0]
  simp only [ne_eq, h0, or_false]
  by_contra hn
  refine h0 (eq_zero_of_bosonic_and_fermionic ?_ h)
  by_cases hc : (ùìï |>‚Çõ œÜs) = bosonic
  ¬∑ have h1 : bosonic = bosonic + bosonic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h1]
    apply superCommuteF_grade
    apply ofCrAnList_mem_statisticSubmodule_of _ _ hc
    apply ofCrAnList_mem_statisticSubmodule_of _ _
    rw [‚Üê hn, hc]
  ¬∑ have h1 : bosonic = fermionic + fermionic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h1]
    apply superCommuteF_grade
    apply ofCrAnList_mem_statisticSubmodule_of _ _
    simpa using hc
    apply ofCrAnList_mem_statisticSubmodule_of _ _
    rw [‚Üê hn]
    simpa using hc

end FieldOpFreeAlgebra

end FieldSpecification
