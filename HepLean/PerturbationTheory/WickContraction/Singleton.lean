/-
Copyright (c) 2025 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import HepLean.PerturbationTheory.WickContraction.TimeContract
import HepLean.PerturbationTheory.WickContraction.StaticContract
import HepLean.PerturbationTheory.Algebras.FieldOpAlgebra.TimeContraction
import HepLean.PerturbationTheory.WickContraction.SubContraction
/-!

# Singleton of contractions

-/

open FieldSpecification
variable {ùìï : FieldSpecification}

namespace WickContraction
variable {n : ‚Ñï} (c : WickContraction n)
open HepLean.List
open FieldOpAlgebra
open FieldStatistic

def singleton {i j : Fin n} (hij : i < j) : WickContraction n :=
  ‚ü®{{i, j}}, by
    intro i hi
    simp at hi
    subst hi
    rw [@Finset.card_eq_two]
    use i, j
    simp
    omega
    , by
    intro i hi j hj
    simp_all‚ü©

lemma mem_singleton {i j : Fin n} (hij : i < j) :
    {i, j} ‚àà (singleton  hij).1  := by
  simp [singleton]

lemma mem_singleton_iff {i j : Fin n} (hij : i < j) {a : Finset (Fin n)} :
    a ‚àà (singleton  hij).1 ‚Üî a = {i, j}  := by
  simp [singleton]

@[simp]
lemma of_singleton_eq {i j : Fin n} (hij : i < j) (a : (singleton hij).1):
    a = ‚ü®{i, j}, mem_singleton hij‚ü© := by
  have ha2 := a.2
  rw [@mem_singleton_iff] at ha2
  exact Subtype.coe_eq_of_eq_mk ha2

lemma singleton_prod {œÜs : List ùìï.States} {i j : Fin œÜs.length} (hij : i < j)
    (f : (singleton hij).1 ‚Üí M) [CommMonoid M]  :
    ‚àè a, f a = f ‚ü®{i,j}, mem_singleton hij‚ü©:= by
  simp [singleton]

@[simp]
lemma singleton_fstFieldOfContract {i j : Fin n} (hij : i < j) :
    (singleton hij).fstFieldOfContract ‚ü®{i, j}, mem_singleton hij‚ü© = i := by
  refine eq_fstFieldOfContract_of_mem (singleton hij) ‚ü®{i, j}, mem_singleton hij‚ü© i j ?_ ?_ ?_
  ¬∑ simp
  ¬∑ simp
  ¬∑ exact hij

@[simp]
lemma singleton_sndFieldOfContract {i j : Fin n} (hij : i < j) :
    (singleton hij).sndFieldOfContract ‚ü®{i, j}, mem_singleton hij‚ü© = j := by
  refine eq_sndFieldOfContract_of_mem (singleton hij) ‚ü®{i, j}, mem_singleton hij‚ü© i j ?_ ?_ ?_
  ¬∑ simp
  ¬∑ simp
  ¬∑ exact hij

lemma singleton_sign_expand {œÜs : List ùìï.States} {i j : Fin œÜs.length} (hij : i < j) :
    (singleton hij).sign = ùì¢(ùìï |>‚Çõ œÜs[j], ùìï |>‚Çõ ‚ü®œÜs.get, (singleton hij).signFinset i j‚ü©) := by
  rw [sign, singleton_prod]
  simp

lemma singleton_getDual?_eq_none_iff_neq {i j : Fin n} (hij : i < j) (a : Fin n) :
    (singleton hij).getDual? a = none ‚Üî (i ‚â† a ‚àß j ‚â† a) := by
  rw [getDual?_eq_none_iff_mem_uncontracted]
  rw [mem_uncontracted_iff_not_contracted]
  simp [singleton]
  omega

lemma singleton_uncontractedEmd_neq_left {œÜs : List ùìï.States} {i j : Fin œÜs.length} (hij : i < j)
    (a : Fin [singleton hij]·µò·∂ú.length ) :
    (singleton hij).uncontractedListEmd a ‚â† i  := by
  by_contra hn
  have h1 : (singleton hij).uncontractedListEmd a ‚àà (singleton hij).uncontracted := by
    simp [uncontractedListEmd]
  have h2 : i ‚àâ  (singleton hij).uncontracted := by
    rw [mem_uncontracted_iff_not_contracted]
    simp [singleton]
  simp_all

lemma singleton_uncontractedEmd_neq_right {œÜs : List ùìï.States} {i j : Fin œÜs.length} (hij : i < j)
    (a : Fin [singleton hij]·µò·∂ú.length ) :
    (singleton hij).uncontractedListEmd a ‚â† j  := by
  by_contra hn
  have h1 : (singleton hij).uncontractedListEmd a ‚àà (singleton hij).uncontracted := by
    simp [uncontractedListEmd]
  have h2 : j ‚àâ  (singleton hij).uncontracted := by
    rw [mem_uncontracted_iff_not_contracted]
    simp [singleton]
  simp_all

@[simp]
lemma mem_signFinset {i j : Fin n} (hij : i < j) (a : Fin n) :
    a ‚àà (singleton hij).signFinset i j ‚Üî i < a ‚àß a < j := by
  simp [signFinset]
  intro h1 h2
  rw [@singleton_getDual?_eq_none_iff_neq]
  apply Or.inl
  omega

lemma subContraction_singleton_eq_singleton {œÜs : List ùìï.States}
    (œÜsŒõ : WickContraction œÜs.length)
    (a : œÜsŒõ.1) : œÜsŒõ.subContraction {a.1} (by simp) =
    singleton (œÜsŒõ.fstFieldOfContract_lt_sndFieldOfContract a) := by
  apply Subtype.ext
  simp [subContraction, singleton]
  exact finset_eq_fstFieldOfContract_sndFieldOfContract œÜsŒõ a

end WickContraction
